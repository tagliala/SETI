// Generated by CoffeeScript 1.4.0
(function() {
  "use strict";

  var HeadCorner, HeadCross, PR_ENUM_ROLE, QuickPassing, QuickShoot, SETI, SpecialEvent, TechnicalVsHead, UnpredictableAction, UnpredictableKeeper, UnpredictableNegative, UnpredictablePassing, UnpredictableShoot, VERSION, collectSpecialists,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.SETI = window.SETI || {};

  SETI = window.SETI;

  SETI.Engine = SETI.Engine || {};

  VERSION = 1;

  PR_ENUM_ROLE = {
    0: "GK",
    1: "CD",
    2: "CD OFF",
    3: "CD TW",
    4: "WB",
    5: "WB OFF",
    6: "WB DEF",
    7: "WB TM",
    8: "IM",
    9: "IM OFF",
    10: "IM DEF",
    11: "IM TW",
    12: "WI",
    13: "WI OFF",
    14: "WI DEF",
    15: "WI TM",
    16: "FW",
    17: "FW DEF",
    18: "FW DEF+T",
    19: "FW TW",
    head_wingers_scorers_count: $(".position-offensive").find(".speciality-head").length,
    headers_count: $(".soccer-field-movement").find(".speciality-head").length
  };

  SpecialEvent = (function() {

    function SpecialEvent() {}

    SpecialEvent.prototype.attendedGoals = function(chanceType1, goalType1, specialistsType1, chanceType2, goalType2, specialistsType2, ballPossession, playCreatively) {
      return (1 - Math.pow(1 - chanceType1 * playCreatively * goalType1, specialistsType1) * Math.pow(1 - chanceType2 * playCreatively * goalType2, specialistsType2)) / 0.5 * ballPossession;
    };

    return SpecialEvent;

  })();

  HeadCorner = (function(_super) {

    __extends(HeadCorner, _super);

    function HeadCorner() {
      return HeadCorner.__super__.constructor.apply(this, arguments);
    }

    HeadCorner.prototype.name = "HeadCorner";

    HeadCorner.prototype.family = "Head";

    HeadCorner.prototype.attendedGoals = function(ballPossession, playCreatively) {
      var playersOnTheField, setPiecesTakerHead, specialistsType1;
      playersOnTheField = $(".soccer-field-movement").find(".player").length;
      specialistsType1 = $(".soccer-field-movement").find(".speciality-head").length;
      setPiecesTakerHead = $("#setPiecesTakerHead")[0].checked || specialistsType1 === playersOnTheField ? 1 : 0;
      specialistsType1 -= setPiecesTakerHead;
      return HeadCorner.__super__.attendedGoals.call(this, 0.0839, 0.9, specialistsType1, 0, 0, 0, ballPossession, playCreatively);
    };

    HeadCorner.prototype.isPossible = function() {
      var setPiecesTakerHead;
      setPiecesTakerHead = $("#setPiecesTakerHead")[0].checked ? 1 : 0;
      return $(".soccer-field-movement").find(".player").length > 1 && $(".soccer-field-movement").find(".speciality-head").length - setPiecesTakerHead > 0;
    };

    return HeadCorner;

  })(SpecialEvent);

  HeadCross = (function(_super) {

    __extends(HeadCross, _super);

    function HeadCross() {
      return HeadCross.__super__.constructor.apply(this, arguments);
    }

    HeadCross.prototype.name = "HeadCross";

    HeadCross.prototype.family = "Head";

    HeadCross.prototype.attendedGoals = function(ballPossession, playCreatively) {
      var specialistsType1;
      specialistsType1 = $(".position-offensive").find(".speciality-head").length;
      if ($(".position-winger").find(".player").length === 1 && $(".position-winger").find(".speciality-head").length === 1) {
        --specialistsType1;
      }
      return HeadCross.__super__.attendedGoals.call(this, 0.03, 0.9, specialistsType1, 0, 0, 0, ballPossession, playCreatively);
    };

    HeadCross.prototype.isPossible = function() {
      return ($(".position-winger").find(".player").length > 0 && $(".position-scorer").find(".speciality-head").length > 0) || ($(".position-winger").find(".player").length > 1 && $(".position-winger").find(".speciality-head").length > 0);
    };

    return HeadCross;

  })(SpecialEvent);

  QuickShoot = (function(_super) {

    __extends(QuickShoot, _super);

    function QuickShoot() {
      return QuickShoot.__super__.constructor.apply(this, arguments);
    }

    QuickShoot.prototype.name = "QuickShoot";

    QuickShoot.prototype.family = "Quick";

    QuickShoot.prototype.attendedGoals = function(ballPossession, playCreatively) {
      var specialistsType1, specialistsType2;
      specialistsType1 = $(".position-scorer").find(".speciality-quick").length;
      specialistsType2 = $(".position-winger").find(".speciality-quick").length;
      return QuickShoot.__super__.attendedGoals.call(this, 0.09, 0.75, specialistsType1, 0.09, 0.15, specialistsType2, ballPossession, playCreatively);
    };

    QuickShoot.prototype.isPossible = function() {
      return $(".position-offensive").find(".speciality-quick").length > 0;
    };

    return QuickShoot;

  })(SpecialEvent);

  QuickPassing = (function(_super) {

    __extends(QuickPassing, _super);

    function QuickPassing() {
      return QuickPassing.__super__.constructor.apply(this, arguments);
    }

    QuickPassing.prototype.name = "QuickPassing";

    QuickPassing.prototype.family = "Quick";

    QuickPassing.prototype.attendedGoals = function(ballPossession, playCreatively) {
      var specialistsType1;
      specialistsType1 = $(".position-offensive").find(".speciality-quick").length;
      if ($(".position-scorer").find(".speciality-quick").length === 1 && $(".position-scorer").find(".player").length === 1) {
        --specialistsType1;
      }
      return QuickPassing.__super__.attendedGoals.call(this, 0.0769, 0.75, specialistsType1, 0, 0, 0, ballPossession, playCreatively);
    };

    QuickPassing.prototype.isPossible = function() {
      return ($(".position-winger").find(".speciality-quick").length > 0 && $(".position-scorer").find(".player").length > 0) || ($(".position-scorer").find(".speciality-quick").length > 0 && $(".position-scorer").find(".player").length > 1);
    };

    return QuickPassing;

  })(SpecialEvent);

  TechnicalVsHead = (function(_super) {

    __extends(TechnicalVsHead, _super);

    function TechnicalVsHead() {
      return TechnicalVsHead.__super__.constructor.apply(this, arguments);
    }

    TechnicalVsHead.prototype.name = "TechnicalVsHead";

    TechnicalVsHead.prototype.family = "Technical";

    TechnicalVsHead.prototype.attendedGoals = function(ballPossession, playCreatively) {
      var specialistsType1, specialistsType2;
      specialistsType1 = $(".position-scorer").find(".speciality-technical").length;
      specialistsType2 = $(".position-winger").find(".speciality-technical").length;
      return TechnicalVsHead.__super__.attendedGoals.call(this, 0.0473, 0.75, specialistsType1, 0.0473, 0.15, specialistsType2, ballPossession, playCreatively);
    };

    TechnicalVsHead.prototype.isPossible = function() {
      return $(".position-offensive").find(".speciality-technical").length > 0;
    };

    return TechnicalVsHead;

  })(SpecialEvent);

  UnpredictableShoot = (function(_super) {

    __extends(UnpredictableShoot, _super);

    function UnpredictableShoot() {
      return UnpredictableShoot.__super__.constructor.apply(this, arguments);
    }

    UnpredictableShoot.prototype.name = "UnpredictableShoot";

    UnpredictableShoot.prototype.family = "Unpredictable";

    UnpredictableShoot.prototype.attendedGoals = function(ballPossession, playCreatively) {
      var specialistsType1, specialistsType2;
      specialistsType1 = $(".position-scorer").find(".speciality-unpredictable").length;
      specialistsType2 = $(".position-winger").find(".speciality-unpredictable").length;
      return UnpredictableShoot.__super__.attendedGoals.call(this, 0.0283, 0.75, specialistsType1, 0.0283, 0.15, specialistsType2, ballPossession, playCreatively);
    };

    UnpredictableShoot.prototype.isPossible = function() {
      return $(".position-offensive").find(".speciality-unpredictable").length > 0;
    };

    return UnpredictableShoot;

  })(SpecialEvent);

  UnpredictableKeeper = (function(_super) {

    __extends(UnpredictableKeeper, _super);

    function UnpredictableKeeper() {
      return UnpredictableKeeper.__super__.constructor.apply(this, arguments);
    }

    UnpredictableKeeper.prototype.name = "UnpredictableKeeper";

    UnpredictableKeeper.prototype.family = "Unpredictable";

    UnpredictableKeeper.prototype.attendedGoals = function(ballPossession, playCreatively) {
      var chanceKeeper, scorers, wingers;
      scorers = $(".position-scorer").find(".player").length;
      wingers = $(".position-winger").find(".player").length;
      chanceKeeper = (scorers * 0.75 + wingers * 0.15) / (scorers + wingers);
      return UnpredictableKeeper.__super__.attendedGoals.call(this, 0.0217, chanceKeeper, 1, 0, 0, 0, ballPossession, playCreatively);
    };

    UnpredictableKeeper.prototype.isPossible = function() {
      return $(".position-keeper").find(".speciality-unpredictable").length > 0 && $(".position-offensive").find(".player").length > 0;
    };

    return UnpredictableKeeper;

  })(SpecialEvent);

  UnpredictableAction = (function(_super) {

    __extends(UnpredictableAction, _super);

    function UnpredictableAction() {
      return UnpredictableAction.__super__.constructor.apply(this, arguments);
    }

    UnpredictableAction.prototype.name = "UnpredictableAction";

    UnpredictableAction.prototype.family = "Unpredictable";

    UnpredictableAction.prototype.attendedGoals = function(ballPossession, playCreatively) {
      var chanceDefensive, chanceScorers, chanceTotal, chanceWingers, scorers, unpredictableDefensive, unpredictablePlayers, unpredictableScorers, unpredictableWingers, wingers;
      unpredictablePlayers = $(".soccer-field-movement").find(".speciality-unpredictable").length;
      unpredictableWingers = $(".position-winger").find(".speciality-unpredictable").length;
      unpredictableScorers = $(".position-scorer").find(".speciality-unpredictable").length;
      unpredictableDefensive = $(".position-defensive").find(".speciality-unpredictable").length;
      scorers = $(".position-scorer").find(".player").length;
      wingers = $(".position-winger").find(".player").length;
      chanceWingers = wingers + scorers > 1 ? (scorers * 0.75 + (wingers - 1) * 0.15) / (scorers + wingers - 1) : 0;
      chanceScorers = wingers + scorers > 1 ? ((scorers - 1) * 0.75 + wingers * 0.15) / (scorers + wingers - 1) : 0;
      chanceDefensive = scorers + wingers > 0 ? (scorers * 0.75 + wingers * 0.15) / (scorers + wingers) : 0;
      chanceTotal = (chanceWingers * unpredictableWingers + chanceScorers * unpredictableScorers + chanceDefensive * unpredictableDefensive) / unpredictablePlayers;
      return UnpredictableAction.__super__.attendedGoals.call(this, 0.0181, chanceTotal, unpredictablePlayers, 0, 0, 0, ballPossession, playCreatively);
    };

    UnpredictableAction.prototype.isPossible = function() {
      return ($(".position-defensive").find(".speciality-unpredictable").length > 0 && $(".position-offensive").find(".player").length > 0) || ($(".position-offensive").find(".speciality-unpredictable").length > 0 && $(".position-offensive").find(".player").length > 1);
    };

    return UnpredictableAction;

  })(SpecialEvent);

  UnpredictablePassing = (function(_super) {

    __extends(UnpredictablePassing, _super);

    function UnpredictablePassing() {
      return UnpredictablePassing.__super__.constructor.apply(this, arguments);
    }

    UnpredictablePassing.prototype.name = "UnpredictablePassing";

    UnpredictablePassing.prototype.family = "Unpredictable";

    UnpredictablePassing.prototype.attendedGoals = function(ballPossession, playCreatively) {
      var chanceDefensive, chanceScorers, chanceTotal, chanceWingers, scorers, unpredictableDefensive, unpredictablePlayers, unpredictableScorers, unpredictableWingers, wingers;
      unpredictablePlayers = $(".soccer-field-movement").find(".speciality-unpredictable").length;
      unpredictableWingers = $(".position-winger").find(".speciality-unpredictable").length;
      unpredictableScorers = $(".position-scorer").find(".speciality-unpredictable").length;
      unpredictableDefensive = $(".position-defensive").find(".speciality-unpredictable").length;
      scorers = $(".position-scorer").find(".player").length;
      wingers = $(".position-winger").find(".player").length;
      chanceWingers = wingers + scorers > 1 ? (scorers * 0.75 + (wingers - 1) * 0.15) / (scorers + wingers - 1) : 0;
      chanceScorers = wingers + scorers > 1 ? ((scorers - 1) * 0.75 + wingers * 0.15) / (scorers + wingers - 1) : 0;
      chanceDefensive = scorers + wingers > 0 ? (scorers * 0.75 + wingers * 0.15) / (scorers + wingers) : 0;
      chanceTotal = (chanceWingers * unpredictableWingers + chanceScorers * unpredictableScorers + chanceDefensive * unpredictableDefensive) / unpredictablePlayers;
      return UnpredictablePassing.__super__.attendedGoals.call(this, 0.0181, chanceTotal, unpredictablePlayers, 0, 0, 0, ballPossession, playCreatively);
    };

    UnpredictablePassing.prototype.isPossible = function() {
      return ($(".position-defensive").find(".speciality-unpredictable").length > 0 && $(".position-offensive").find(".player").length > 0) || ($(".position-offensive").find(".speciality-unpredictable").length > 0 && $(".position-offensive").find(".player").length > 1);
    };

    return UnpredictablePassing;

  })(SpecialEvent);

  UnpredictableNegative = (function(_super) {

    __extends(UnpredictableNegative, _super);

    function UnpredictableNegative() {
      return UnpredictableNegative.__super__.constructor.apply(this, arguments);
    }

    UnpredictableNegative.prototype.name = "UnpredictableNegative";

    UnpredictableNegative.prototype.family = "Unpredictable";

    UnpredictableNegative.prototype.attendedGoals = function(ballPossession, playCreatively) {
      var specialistsType1, specialistsType2;
      specialistsType1 = $(".position-inner").find(".speciality-unpredictable").length;
      specialistsType2 = $(".position-defender").find(".speciality-unpredictable").length;
      return -1 * UnpredictableNegative.__super__.attendedGoals.call(this, 0.0451, 0.55, specialistsType1, 0.022, 0.55, specialistsType2, ballPossession, playCreatively);
    };

    UnpredictableNegative.prototype.isPossible = function() {
      return $(".position-defensive").find(".speciality-unpredictable").length > 0;
    };

    return UnpredictableNegative;

  })(SpecialEvent);

  /*
  1) Corner + CdT : 8.39% - Dif CC Ali Att - 90% tutti
  2) Cross + CdT : 3% - Ali (almeno due) - Att (almeno un'ala) - 90%
  3) Veloce + Tiro - 9% - Ali 15% - Att 75%
  4) Veloce + Pass - 7.69% - Ali e Att 75% - Almeno un attaccante se Ala veloce, almeno due attaccanti se Att veloce
  5) Tecnico vs CdT - 4.73% (un CdT avversario CC/dif) - Ali 15% - Att 75%
  6) Imprevedibile + Tiro - 2.83% - Ali 15% - Att 75%
  7) Imprevedibile (Azione?) - 1.81% - Realizzano ali e attaccanti, quindi % = (x * 15% + y * 75%) / (x+y) dove x sono le ali e y gli attaccanti - possono farlo anche cc e dif, userei la stessa %
  8) Imprevedibile + Pass - 1.47% - Uguale a quello sopra
  9) Imprevedibile errore - 4.51% - 55% per i CC - 2.20% - 55% per i difensori
  */


  collectSpecialists = function() {
    return {
      head_wingers_scorers_count: $(".position-offensive").find(".speciality-head").length,
      headers_count: $(".soccer-field-movement").find(".speciality-head").length,
      quick_wingers_count: $(".position-winger").find(".speciality-quick").length,
      quick_scorers_count: $(".position-scorer").find(".speciality-quick").length,
      unpredictable_keeper_count: $(".position-keeper").find(".speciality-unpredictable").length,
      unpredictable_defenders_count: $(".position-defender").find(".speciality-unpredictable").length,
      unpredictable_inners_count: $(".position-inner").find(".speciality-unpredictable").length,
      unpredictable_wingers_count: $(".position-winger").find(".speciality-unpredictable").length,
      unpredictable_scorers_count: $(".position-scorer").find(".speciality-unpredictable").length,
      technicals_count: $(".position-offensive").find(".speciality-technical").length
    };
  };

  SETI.Engine.SpecialEvents = [new HeadCorner(), new HeadCross(), new QuickShoot(), new QuickPassing(), new TechnicalVsHead(), new UnpredictableKeeper(), new UnpredictableShoot(), new UnpredictableAction(), new UnpredictablePassing(), new UnpredictableNegative()];

  SETI.Engine.start = function() {
    var ballPossession, currentAttendedGoals, playCreatively, specialEvent, specialists, _i, _len, _ref;
    this.results = {
      goals: 0,
      SE: {}
    };
    this.results.SE.size = function() {
      return Object.keys(this).length - 1;
    };
    specialists = collectSpecialists();
    ballPossession = $("#ballPossession").val() / 100;
    switch ($("#playCreatively").val()) {
      case "yes":
        playCreatively = 1.5;
        break;
      case "both":
        playCreatively = 1.7;
        break;
      default:
        playCreatively = 1;
    }
    _ref = SETI.Engine.SpecialEvents;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      specialEvent = _ref[_i];
      if (specialEvent.isPossible()) {
        currentAttendedGoals = specialEvent.attendedGoals(ballPossession, playCreatively);
        this.results.SE[specialEvent.name] = currentAttendedGoals;
        this.results.goals = this.results.goals + currentAttendedGoals;
      }
    }
    return this.results;
  };

}).call(this);
