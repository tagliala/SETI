// Generated by CoffeeScript 1.4.0
(function() {
  "use strict";

  var AUTOSTART, DEBUG, FORM_ID, SETI, checkIframe, createAlert, fillFieldFromMatch, fillForm, format, gup, highlightDropElements, initDragdrop, loginMenuHide, loginMenuShow, number_format, plot_redraw, previousPoint, resetResults, resetSoccerField, scrollUpToResults, setPlayerFormFields, setPlayerInField, setupCHPPPlayerFields, showTooltip, sortCHPPPlayerFields, sort_by, startCalculation, stripeTable, switchPlayersInField, unhighlightDropElements, updateCHPPPlayerFields;

  window.SETI = window.SETI || {};

  SETI = window.SETI;

  SETI.CONFIG = SETI.CONFIG || {};

  $.extend(SETI.CONFIG, {
    FORM_ID: "#formPlayersInfo",
    DEBUG: false,
    AUTOSTART: true,
    PR_ENUM_SPECIALITY: {
      No: 0,
      Technical: 1,
      Quick: 2,
      Powerful: 3,
      Unpredictable: 4,
      Head: 5,
      Regainer: 6
    },
    PR_ENUM_SKILL: {
      Keeper: 0,
      Defending: 1,
      Playmaking: 2,
      Winger: 3,
      Passing: 4,
      Scoring: 5
    },
    PLOT_OPTIONS: {
      shadowSize: 0,
      lines: {
        show: true,
        lineWidth: 2,
        steps: false
      },
      points: {
        show: false,
        radius: 3
      },
      xaxis: {
        color: "#666666",
        ticks: [1, 6, 11, 16, 21, 26, 31, 36, 41, 46, 51, 56, 61, 66, 71, 76, 81, 86, 89]
      },
      yaxis: {
        color: "#666666",
        tickFormatter: function(val, axis) {
          return val.toFixed(2);
        }
      },
      grid: {
        backgroundColor: null,
        color: null,
        borderWidth: 2,
        borderColor: "#AAAAAA",
        hoverable: true,
        labelMargin: 15
      }
    }
  });

  format = function(source, params) {
    if (arguments.length === 1) {
      return function() {
        var args;
        args = $.makeArray(arguments);
        args.unshift(source);
        return format.apply(this, args);
      };
    }
    if (arguments.length > 2 && params.constructor !== Array) {
      params = $.makeArray(arguments).slice(1);
    }
    if (params.constructor !== Array) {
      params = [params];
    }
    $.each(params, function(i, n) {
      source = source.replace(new RegExp("\\{" + i + "\\}", "g"), n);
    });
    return source;
  };

  FORM_ID = SETI.CONFIG.FORM_ID;

  DEBUG = SETI.CONFIG.DEBUG;

  AUTOSTART = SETI.CONFIG.AUTOSTART;

  $('.dropdown-menu').find('form').click(function(e) {
    return e.stopPropagation();
  });

  checkIframe = function() {
    if (top.location !== self.location) {
      return top.location = self.location;
    }
  };

  gup = function(name) {
    var regex, regexS, results;
    name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
    regexS = "[\\?&]" + name + "=([^&#]*)";
    regex = new RegExp(regexS);
    results = regex.exec(window.location.search);
    if (results != null) {
      return results[1];
    }
  };

  number_format = function(number, decimals, dec_point, thousands_sep) {
    var n, prec, s, toFixedFix;
    if (number == null) {
      number = "";
    }
    if (decimals == null) {
      decimals = 0;
    }
    if (dec_point == null) {
      dec_point = ".";
    }
    if (thousands_sep == null) {
      thousands_sep = ",";
    }
    number = (String(number)).replace(/[^0-9+\-Ee.]/g, "");
    n = isFinite(number) ? number : 0;
    prec = isFinite(decimals) ? Math.abs(decimals) : 0;
    s = "";
    toFixedFix = function(n, prec) {
      var k;
      k = Math.pow(10, prec);
      return "" + Math.round(n * k) / k;
    };
    s = (prec ? toFixedFix(n, prec) : "" + Math.round(n)).split('.');
    if (s[0].length > 3) {
      s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, thousands_sep);
    }
    if ((s[1] || "").length < prec) {
      s[1] = s[1] || "";
      s[1] += new Array(prec - s[1].length + 1).join("0");
    }
    return s.join(dec_point);
  };

  scrollUpToResults = function() {
    var $elem, docViewTop, elemTop;
    $elem = $(".nav-tabs");
    docViewTop = $(window).scrollTop();
    elemTop = $elem.offset().top;
    if (docViewTop > elemTop) {
      return $('html, body').animate({
        scrollTop: elemTop
      }, 200);
    }
  };

  stripeTable = function() {
    return $("#se-tables-container tbody").each(function() {
      $(this).find("th, td").removeClass("stripe");
      return $(this).find("tr:visible:odd th, tr:visible:odd td").addClass("stripe");
    });
  };

  createAlert = function(params) {
    return "<div class=\"alert alert-block alert-" + params.type + " fade in\" id=\"" + params.id + "\">\n  <button class=\"close\" data-dismiss=\"alert\" type=\"button\">&times;</button>\n  <h4 class=\"alert-heading\">" + params.title + "</h4>\n  <p id=\"" + params.id + "Body\">" + params.body + "</p>\n</div>";
  };

  fillForm = function() {
    var field, fields, i, params, paramsString, _i, _len;
    paramsString = gup("params");
    if (paramsString == null) {
      return;
    }
    params = decodeURI(paramsString).split("-");
    fields = $('#formPlayersInfo *[name^=Staminia_]');
    for (i = _i = 0, _len = fields.length; _i < _len; i = ++_i) {
      field = fields[i];
      field.value = params[i];
    }
    checkFormButtonsAppearance();
    if (isAdvancedModeEnabled()) {
      enableAdvancedMode();
    } else {
      disableAdvancedMode();
    }
    stripeTable();
  };

  $("#getLink").on("click", function(e) {
    var body, clippy, link, locale;
    if (!$(FORM_ID).validate().form()) {
      $("#generatedLink").alert('close');
      return;
    }
    link = document.location.href.split("?")[0];
    locale = gup("locale");
    if (locale != null) {
      link += "?locale=" + locale + "&amp;";
    } else {
      link += "?";
    }
    link += "params=" + (encodeURI($('#formPlayersInfo *[name^=Staminia_]').fieldValue(false).toString().replace(/,/g, "-")));
    clippy = "&nbsp;<span class=\"clippy\" data-clipboard-text=\"" + link + "\" id=\"staminiaClippy\"></span>";
    body = link;
    if ($("#generatedLinkBody").length) {
      $("#copyLinkToClipboard").data("text", link);
      $("#staminiaClippy").attr("data-clipboard-text", link);
      $("#generatedLinkBody").fadeOut("fast", function() {
        return $(this).html(body).fadeIn("fast");
      });
    } else {
      $("#AlertsContainer").append(createAlert({
        "id": "generatedLink",
        "type": "info",
        "body": body,
        "title": SETI.messages.copy_link + " " + clippy
      }));
      new SETI.ClippableBehavior($("#staminiaClippy")[0]);
    }
    scrollUpToResults();
  });

  $('a[data-toggle="tab"]').on('shown', function(e) {
    if ($(e.target).attr("href") === "#tabCredits") {
      $("#AlertsContainer").hide();
    } else {
      $("#AlertsContainer").show();
    }
    if ($(e.target).attr("href") === "#tabCharts") {
      plot_redraw(document.plot1);
      plot_redraw(document.plot2);
    }
  });

  $("#resetApp").on("click", function(e) {
    $(FORM_ID).each(function() {
      if (typeof this.reset === 'function' || (typeof this.reset === 'object' && !this.reset.nodeType)) {
        return this.reset();
      }
    });
    $('.control-group').removeClass("error");
    $("#AlertsContainer").html("");
    resetAndHideTabs();
    $("button[data-checkbox-button], button[data-radio-button]").each(function() {
      var form;
      form = $(FORM_ID)[0];
      form[$(this).data("linkedTo")].value = $(this).data("default-value");
    });
    checkFormButtonsAppearance();
    disableAdvancedMode();
    setupCHPPPlayerFields();
    stripeTable();
    return e.preventDefault();
  });

  $.validator.methods.range = function(value, element, param) {
    var globalizedValue;
    globalizedValue = value.replace(",", ".");
    return this.optional(element) || (globalizedValue >= param[0] && globalizedValue <= param[1]);
  };

  $.validator.methods.number = function(value, element) {
    return this.optional(element) || /^-?(?:\d+|\d{1,3}(?:[\s\.,]\d{3})+)(?:[\.,]\d+)?$/.test(value);
  };

  $.validator.addMethod("position", function(value, element, params) {
    return this.optional(element) || value >= params[0] && value <= params[1];
  }, jQuery.validator.messages.required);

  $.ajaxSetup({
    dataType: "json",
    timeout: 30000,
    beforeSend: function(XMLHttpRequest, settings) {
      $("#CHPP_Refresh_Data").button('loading');
      $("#CHPP_Refresh_Data_Status").find("i").attr("class", "icon-white icon-time");
      $("#CHPP_Refresh_Data_Status").find("i").attr("title", "");
      $("#CHPP_Refresh_Data_Status").attr("disabled", "disabled");
      $("#CHPP_Refresh_Data_Status").removeClass("btn-danger btn-success btn-warning").addClass("btn-progress");
      $("#CHPP_Results").hide();
      return $("#CHPP_Status_Description").html("");
    },
    success: function(jsonObject, textStatus, xhr) {
      var MatchOrders, PlayersData, description_message, error_message, player, _i, _len;
      switch (jsonObject.Status) {
        case "OK":
          try {
            $("#menuLoginTitle").text(jsonObject.TeamName);
            PlayersData = jsonObject.PlayersData;
            SETI.PlayersData = PlayersData;
            SETI.Players = {};
            for (_i = 0, _len = PlayersData.length; _i < _len; _i++) {
              player = PlayersData[_i];
              SETI.Players[player.PlayerID] = player;
            }
            MatchOrders = jsonObject.MatchOrders;
            SETI.MatchOrders = MatchOrders;
            fillFieldFromMatch(true);
            loginMenuHide();
            if (jsonObject.RefreshThrottle) {
              $("#CHPP_Refresh_Data_Status").find("i").attr("class", "icon-warning-sign");
              $("#CHPP_Refresh_Data_Status").find("i").attr("title", SETI.messages.status_warning);
              $("#CHPP_Refresh_Data_Status").removeClass("btn-progress btn-danger btn-success").addClass("btn-warning");
              $("#CHPP_Status_Description").text(SETI.messages.refresh_throttle(jsonObject.RefreshThrottle));
            } else {
              $("#CHPP_Refresh_Data_Status").find("i").attr("class", "icon-white icon-ok");
              $("#CHPP_Refresh_Data_Status").find("i").attr("title", SETI.messages.status_ok);
              $("#CHPP_Refresh_Data_Status").removeClass("btn-progress btn-danger btn-warning").addClass("btn-success");
            }
            $("#CHPP_Refresh_Data").data("completeText", $("#CHPP_Refresh_Data").data("successText"));
          } catch (error) {
            $("#CHPP_Refresh_Data_Status").find("i").attr("class", "icon-white icon-remove");
            $("#CHPP_Refresh_Data_Status").find("i").attr("title", SETI.messages.status_error);
            $("#CHPP_Refresh_Data_Status").removeClass("btn-progress btn-success btn-warning").addClass("btn-danger");
            loginMenuShow();
            $("#CHPP_Refresh_Data").data("completeText", $("#CHPP_Refresh_Data").data("errorText"));
            $("#CHPP_Status_Description").html("" + SETI.messages.error_unknown + ".<br/>\n" + SETI.messages.retry_to_authorize + ".");
          }
          break;
        case "Error":
          switch (jsonObject.ErrorCode) {
            case "InvalidToken":
              error_message = SETI.messages.error_invalid_token;
              description_message = SETI.messages.retry_to_authorize;
              break;
            case "":
              break;
            default:
              error_message = SETI.messages.error_unknown;
              description_message = SETI.messages.retry_to_authorize;
          }
          $("#CHPP_Refresh_Data_Status").find("i").attr("class", "icon-white icon-remove");
          $("#CHPP_Refresh_Data_Status").find("i").attr("title", SETI.messages.status_error);
          $("#CHPP_Refresh_Data_Status").removeClass("btn-progress btn-success btn-warning").addClass("btn-danger");
          $("#CHPP_Status_Description").html("" + error_message + "<br/>\n" + description_message);
          loginMenuShow();
          $("#CHPP_Refresh_Data").data("completeText", $("#CHPP_Refresh_Data").data("errorText"));
      }
      $("#CHPP_Refresh_Data_Status").removeAttr("disabled");
    },
    error: function(jqXHR, textStatus, thrownError) {
      var description_message, error_message;
      switch (textStatus) {
        case "timeout":
          error_message = SETI.messages.error_timeout;
          description_message = "";
          break;
        case "parsererror":
          error_message = SETI.messages.error_parser;
          description_message = "";
          break;
        default:
          error_message = SETI.messages.error_unknown;
          description_message = SETI.messages.retry_to_authorize;
      }
      $("#CHPP_Refresh_Data_Status").find("i").attr("class", "icon-white icon-remove");
      $("#CHPP_Refresh_Data_Status").find("i").attr("title", SETI.messages.status_error);
      $("#CHPP_Refresh_Data_Status").removeClass("btn-success btn-warning").addClass("btn-danger");
      $("#CHPP_Status_Description").html("" + error_message + "<br/>\n" + description_message);
      loginMenuShow();
      $("#CHPP_Refresh_Data").data("completeText", $("#CHPP_Refresh_Data").data("errorText"));
      $("#CHPP_Refresh_Data_Status").removeAttr("disabled");
    },
    complete: function(jqXHR, textStatus) {
      $("#CHPP_Results").show();
      return $("#CHPP_Refresh_Data").button('complete');
    }
  });

  sort_by = function(field, reverse, primer) {
    reverse = reverse ? -1 : 1;
    return function(a, b) {
      a = a[field];
      b = b[field];
      if (primer != null) {
        a = primer(a);
        b = primer(b);
        if (isNaN(a)) {
          a = Infinity;
        }
        if (isNaN(b)) {
          b = Infinity;
        }
      }
      if (a < b) {
        return reverse * -1;
      }
      if (a > b) {
        return reverse * 1;
      }
      return 0;
    };
  };

  sortCHPPPlayerFields = function() {
    var PlayersData, field, primer, reverse;
    PlayersData = SETI.PlayersData;
    if (PlayersData == null) {
      return;
    }
    field = "PlayerNumber";
    reverse = false;
    primer = parseInt;
    switch ($("" + FORM_ID + " select[id=CHPP_Players_SortBy]").val()) {
      case "ShirtNumber":
        field = "PlayerNumber";
        break;
      case "Name":
        field = "PlayerName";
        primer = void 0;
        break;
      case "Form":
        field = "PlayerForm";
        reverse = true;
        break;
      case "Stamina":
        field = "StaminaSkill";
        reverse = true;
        break;
      case "Keeper":
        field = "KeeperSkill";
        reverse = true;
        break;
      case "Playmaking":
        field = "PlaymakerSkill";
        reverse = true;
        break;
      case "Passing":
        field = "PassingSkill";
        reverse = true;
        break;
      case "Winger":
        field = "WingerSkill";
        reverse = true;
        break;
      case "Defending":
        field = "DefenderSkill";
        reverse = true;
        break;
      case "Scoring":
        field = "ScorerSkill";
        reverse = true;
        break;
      case "SetPieces":
        field = "SetPiecesSkill";
        reverse = true;
        break;
      case "Experience":
        field = "Experience";
        reverse = true;
        break;
      case "Loyalty":
        field = "Loyalty";
        reverse = true;
    }
    PlayersData.sort(sort_by(field, reverse, primer));
  };

  updateCHPPPlayerFields = function() {
    var PlayersData, index, mc, name, number, optionElement, player, select, selectP1, selectP2, _i, _len;
    PlayersData = SETI.PlayersData;
    if (PlayersData == null) {
      return;
    }
    sortCHPPPlayerFields();
    $("#CHPP_Player_1").html("");
    $("#CHPP_Player_2").html("");
    select = $(document.createElement("select"));
    for (index = _i = 0, _len = PlayersData.length; _i < _len; index = ++_i) {
      player = PlayersData[index];
      optionElement = $(document.createElement("option"));
      if ((Number(player.InjuryLevel)) === 0) {
        optionElement.addClass("isBruised");
      }
      if ((Number(player.InjuryLevel)) > 0) {
        optionElement.addClass("isInjured");
      }
      if ((Number(player.Cards)) >= 3) {
        optionElement.addClass("isSuspended");
      }
      if (player.TransferListed) {
        optionElement.addClass("isTransferListed");
      }
      optionElement.attr("value", index);
      name = optionElement.text("" + (number = player.PlayerNumber != null ? player.PlayerNumber + '.' : '') + " " + player.PlayerName + " " + (mc = player.MotherClubBonus ? '\u2665' : ''));
      select.append(optionElement);
    }
    selectP1 = select.clone("true");
    selectP2 = select.clone("true");
    selectP1.attr("id", "CHPP_Player_1");
    selectP2.attr("id", "CHPP_Player_2");
    $("#CHPP_Player_1").html(selectP1.html());
    $("#CHPP_Player_2").html(selectP2.html());
  };

  setupCHPPPlayerFields = function(checkUrlParameter) {
    if (checkUrlParameter == null) {
      checkUrlParameter = false;
    }
    updateCHPPPlayerFields();
    if ($("#CHPP_Player_1 option").length > 2 && $("#CHPP_Player_2 option").length > 2) {
      $("#CHPP_Player_1 option:eq(0)").attr("selected", "selected");
      $("#CHPP_Player_2 option:eq(1)").attr("selected", "selected");
      setPlayerFormFields(1, checkUrlParameter);
      setPlayerFormFields(2, checkUrlParameter);
    }
  };

  $("" + FORM_ID + " select[id=CHPP_Player_1]").on("change", function() {
    setPlayerFormFields(1);
  });

  $("" + FORM_ID + " select[id=CHPP_Player_2]").on("change", function() {
    setPlayerFormFields(2);
  });

  $("" + FORM_ID + " select[id=CHPP_Players_SortBy]").on("change", function() {
    updateCHPPPlayerFields();
    if ($("#CHPP_Player_1 option").length > 2 && $("#CHPP_Player_2 option").length > 2) {
      $("#CHPP_Player_1 option:eq(0)").attr("selected", "selected");
      $("#CHPP_Player_2 option:eq(1)").attr("selected", "selected");
      setPlayerFormFields(1);
      setPlayerFormFields(2);
    }
  });

  setPlayerFormFields = function(player, checkUrlParameter) {
    var PlayerData, PlayersData, formReference;
    if (checkUrlParameter == null) {
      checkUrlParameter = false;
    }
    if (checkUrlParameter && (gup("params") != null)) {
      return;
    }
    PlayersData = SETI.PlayersData;
    formReference = $(FORM_ID)[0];
    if (PlayersData == null) {
      return;
    }
    PlayerData = PlayersData[formReference["CHPP_Player_" + player].value];
    if (PlayerData == null) {
      return;
    }
    formReference["Staminia_Simple_Player_" + player + "_Experience"].value = PlayerData.Experience;
    formReference["Staminia_Simple_Player_" + player + "_Stamina"].value = PlayerData.StaminaSkill;
    formReference["Staminia_Simple_Player_" + player + "_Form"].value = PlayerData.PlayerForm;
    formReference["Staminia_Simple_Player_" + player + "_MainSkill"].value = PlayerData.MainSkill;
    formReference["Staminia_Simple_Player_" + player + "_Loyalty"].value = PlayerData.Loyalty;
    if ((PlayerData.MotherClubBonus && !$("#Button_Player_" + player + "_MotherClubBonus_Status").hasClass("btn-success")) || (!PlayerData.MotherClubBonus && $("#Button_Player_" + player + "_MotherClubBonus_Status").hasClass("btn-success"))) {
      $("#Button_Player_" + player + "_MotherClubBonus").click();
    }
    formReference["Staminia_Advanced_Player_" + player + "_Experience"].value = number_format(PlayerData.Experience, 2);
    formReference["Staminia_Advanced_Player_" + player + "_Stamina"].value = number_format(PlayerData.StaminaSkill, 2);
    formReference["Staminia_Advanced_Player_" + player + "_Form"].value = number_format(PlayerData.PlayerForm, 2);
    formReference["Staminia_Advanced_Player_" + player + "_Loyalty"].value = number_format(PlayerData.Loyalty, 2);
    formReference["Staminia_Advanced_Player_" + player + "_Skill_Keeper"].value = number_format(PlayerData.KeeperSkill, 2);
    formReference["Staminia_Advanced_Player_" + player + "_Skill_Defending"].value = number_format(PlayerData.DefenderSkill, 2);
    formReference["Staminia_Advanced_Player_" + player + "_Skill_Playmaking"].value = number_format(PlayerData.PlaymakerSkill, 2);
    formReference["Staminia_Advanced_Player_" + player + "_Skill_Winger"].value = number_format(PlayerData.WingerSkill, 2);
    formReference["Staminia_Advanced_Player_" + player + "_Skill_Passing"].value = number_format(PlayerData.PassingSkill, 2);
    return formReference["Staminia_Advanced_Player_" + player + "_Skill_Scoring"].value = number_format(PlayerData.ScorerSkill, 2);
  };

  loginMenuHide = function() {
    $("#loginDropdown").addClass("hide");
    return $("#loggedInDropdown").removeClass("hide");
  };

  loginMenuShow = function() {
    $("#menuLoginTitle").text("CHPP");
    $("#loggedInDropdown").addClass("hide");
    return $("#loginDropdown").removeClass("hide");
  };

  $("#CHPP_Refresh_Data").on("click", function() {
    return $.ajax({
      url: "chpp/chpp_retrievedata.php?refresh",
      cache: false
    });
  });

  $("#CHPP_Revoke_Auth_Link").on("click", function() {
    $(this).closest("[class~='open']").removeClass('open');
    return window.confirm(SETI.messages.revoke_auth_confirm);
  });

  plot_redraw = function(plot) {
    if (plot == null) {
      return;
    }
    plot.resize();
    plot.setupGrid();
    return plot.draw();
  };

  $(window).resize($.debounce(500, function() {
    if (!$("#tabChartsNav").hasClass("active")) {
      return;
    }
    if (document.plot1 != null) {
      plot_redraw(document.plot1);
    }
    if (document.plot2 != null) {
      return plot_redraw(document.plot2);
    }
  }));

  showTooltip = function(x, y, contents) {
    var $content_div;
    $content_div = $('<div id="flot-tooltip">' + contents + '</div>').appendTo("body");
    return $content_div.css({
      display: "none",
      visibility: "visible",
      top: y - $content_div.height() - 11,
      left: x - $content_div.width() - 11
    }).fadeIn("fast");
  };

  previousPoint = null;

  $("#chartTotal, #chartPartials").bind("plothover", function(event, pos, item) {
    var x, y;
    if (item) {
      if (previousPoint === item.dataIndex) {
        return;
      }
      previousPoint = item.dataIndex;
      $("#flot-tooltip").remove();
      x = item.datapoint[0];
      y = item.datapoint[1].toFixed(2);
      return showTooltip(item.pageX, item.pageY, "" + SETI.messages.substitution_minute + ": " + x + "<br/>" + SETI.messages.contribution + ": " + y);
    } else {
      $("#flot-tooltip").remove();
      return previousPoint = null;
    }
  });

  fillFieldFromMatch = function() {
    var Players, order, player, position, speciality, _i, _len, _ref;
    if (!SETI.MatchOrders) {
      return;
    }
    resetSoccerField();
    Players = SETI.Players;
    _ref = SETI.MatchOrders;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      order = _ref[_i];
      position = Number(order.Position);
      player = Players[order.PlayerID];
      if (position === 17) {
        if (player.Speciality === "5") {
          $("#setPiecesTakerHead").prop("checked", true);
        }
      }
      if (position < 100) {
        continue;
      }
      speciality = player.Speciality;
      if (speciality === "3" || speciality === "6") {
        speciality = "0";
      }
      $("#position-" + position).html($("#player-speciality-" + speciality).html());
    }
    return startCalculation();
  };

  resetSoccerField = function() {
    $(".player-position.drop").html("<div></div>");
    $("#setPiecesTakerHead").prop("checked", false);
    $("#playCreatively").val("No");
    return $("#ballPossession").val(50);
  };

  SETI.format = format;

  SETI.number_format = number_format;

  $(function() {
    var hasParams;
    checkIframe();
    hasParams = gup("params") != null;
    if (hasParams) {
      fillForm();
    }
    if (document.startAjax) {
      return $.ajax({
        url: "chpp/chpp_retrievedata.php",
        cache: true
      });
    }
  });

  unhighlightDropElements = function(clickable) {
    if (clickable == null) {
      clickable = false;
    }
    $(".drop").removeClass("highlight");
    if (clickable) {
      $(".drop").removeClass("clickable");
    }
    return $(".trash-players").fadeOut();
  };

  highlightDropElements = function(clickable) {
    if (clickable == null) {
      clickable = false;
    }
    if ($(".soccer-field-movement").find(".player").length >= 10) {
      $(".soccer-field-keeper .drop").addClass("highlight");
      if (clickable) {
        $(".soccer-field-keeper .drop").addClass("clickable");
      }
    } else {
      $(".drop").addClass("highlight");
      if (clickable) {
        $(".drop").addClass("clickable");
      }
    }
    if (clickable) {
      return $(".drop.player").addClass("clickable");
    }
  };

  setPlayerInField = function($src, $dst) {
    return $dst.html($src.html());
  };

  switchPlayersInField = function($src, $dst) {
    var $temp;
    $temp = $dst.html();
    $dst.html($src.html());
    $src.html($temp);
    return $src.find("div").removeClass("droppableHover");
  };

  $(function() {
    return initDragdrop($("li.drop, li.draggable"));
  });

  initDragdrop = function($element) {
    return $element.dragdrop({
      srcElement: null,
      makeClone: true,
      appendTo: $("body"),
      sourceClass: "pendingDrop",
      dropClass: "droppableHover",
      dragClass: "whileDragging",
      container: $(".no-text-select"),
      canDrag: function($src, event) {
        var $source;
        $source = $(event.target);
        if ($source.hasClass("player") && !$source.parent().hasClass("pendingDrop")) {
          highlightDropElements();
          this.srcElement = $source.parent();
          if (this.srcElement.hasClass("drop")) {
            $(".trash-players").fadeIn();
          }
          return this.srcElement;
        }
      },
      canDrop: function($dst) {
        return $dst.parent().hasClass("drop") && ($dst.parent().hasClass("position-keeper") || ($(".soccer-field-movement").find(".player").length < 10 || $dst.hasClass("player"))) || this.srcElement.hasClass("drop") && $dst.parent().hasClass("trash-players") || this.srcElement.hasClass("drop") && $dst.parent().hasClass("drop");
      },
      didDrop: function($src, $dst) {
        var $li;
        if ($dst.parent().hasClass("trash-players")) {
          $src.html("<div></div>");
        } else {
          $li = $dst.parent();
          if (!$src.hasClass("drop")) {
            setPlayerInField($src, $li);
          } else {
            if ($src !== $li) {
              switchPlayersInField($src, $li);
            }
          }
        }
        return startCalculation();
      },
      endDrag: function($src, $dst) {
        return unhighlightDropElements();
      }
    });
  };

  /*
    $(".draggable").each ->
      console.log "TOP: #{$(this).offset().top} - LEFT: #{$(this).offset().left}"
    $(".lead").each ->
      console.log "TOP: #{$(this).offset().top} - LEFT: #{$(this).offset().left}"
  */


  $("select, input[type=checkbox]").on("change", function() {
    return startCalculation();
  });

  $(".trash-players").on("click touchend", function(e) {
    var $src;
    $src = $(".soccer-field .pendingDrop");
    if ($src[0] == null) {
      return;
    }
    $src.removeClass("pendingDrop").html("<div></div>");
    unhighlightDropElements(true);
    return startCalculation();
  });

  $(".soccer-field-wrapper").on("click touchend", ".draggable, .drop", function(e) {
    var $dst, $src, $this;
    $this = $(this);
    if ($(".pendingDrop").length === 0 && ($this.find(".player")[0] != null)) {
      if ($this.hasClass("drop")) {
        $(".trash-players").fadeIn();
      }
      $this.addClass("pendingDrop");
      return highlightDropElements(true);
    } else if ($(".pendingDrop").length > 0) {
      $src = $(".pendingDrop").removeClass("pendingDrop");
      unhighlightDropElements(true);
      $dst = $(this);
      if ($src === $dst || $dst.hasClass("draggable")) {
        return;
      }
      if (!$src.hasClass("drop")) {
        setPlayerInField($src, $dst);
      } else {
        if ($src !== $dst) {
          switchPlayersInField($src, $dst);
        }
      }
      return startCalculation();
    }
  });

  resetResults = function() {
    $("#attendedGoalsContainer").removeClass("success danger");
    $("#attendedGoals").text("0.00");
    return $("#se-tables-container table").each(function() {
      $(this).data("subtotal", 0);
      return $(this).hide();
    });
  };

  startCalculation = function() {
    return setTimeout(function() {
      var $table, currentSeGoals, results, specialEvent, subtotal, _i, _len, _ref;
      resetResults();
      results = SETI.Engine.start();
      if (results.goals < 0) {
        $("#attendedGoalsContainer").addClass("danger");
      } else if (results.goals > 0) {
        $("#attendedGoalsContainer").addClass("success");
      }
      $("#attendedGoals").text(results.goals.toFixed(2));
      _ref = SETI.Engine.SpecialEvents;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        specialEvent = _ref[_i];
        if ((currentSeGoals = results.SE[specialEvent.name]) != null) {
          $("#Count_" + specialEvent.name).text(currentSeGoals.toFixed(4)).closest("tr").show();
          $table = $("#Count_" + specialEvent.family);
          subtotal = $table.data("subtotal") + currentSeGoals;
          $table.data("subtotal", subtotal);
          $("#Count_" + specialEvent.family + "_Subtotal").text("(" + (subtotal.toFixed(4)) + ")");
          $table.show();
        } else {
          $("#Count_" + specialEvent.name).closest("tr").hide();
        }
      }
      return stripeTable();
    }, 0);
  };

}).call(this);
